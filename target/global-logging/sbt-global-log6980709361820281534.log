[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mikko\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mikko\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (IBM Corporation Java 1.8.0_352)
[debug]       Load.loadUnit: plugins took 65.3368ms
[debug]       Load.loadUnit: defsScala took 0.2296ms
[debug] [Loading] Scanning directory C:\Users\mikko\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.1971 ms
[debug]           Load.resolveProject(global-plugins) took 35.7954ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mikko\.sbt\1.0\plugins, plugins: List(<none>))) took 64.0434ms
[debug] [Loading] Done in C:\Users\mikko\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 83.0529ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.243ms
[debug]     Load.loadUnit(file:/C:/Users/mikko/.sbt/1.0/plugins/, ...) took 154.6606ms
[debug]   Load.apply: load took 335.2175ms
[debug]   Load.apply: resolveProjects took 7.3756ms
[debug]   Load.apply: finalTransforms took 87.756ms
[debug]   Load.apply: config.delegates took 8.285ms
[debug]   Load.apply: Def.make(settings)... took 587.4554ms
[debug]   Load.apply: structureIndex took 134.8282ms
[debug]   Load.apply: mkStreams took 1.5025ms
[info] loading global plugins from C:\Users\mikko\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2528.8634ms
[debug]           Load.loadUnit: plugins took 24.2222ms
[debug]           Load.loadUnit: defsScala took 0.0048ms
[debug] [Loading] Scanning directory C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project
[debug]             Load.loadUnit: mkEval took 3.353ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.1872 ms
[info] loading settings for project concurrentbackend-build from idea1.sbt ...
[debug]               Load.resolveProject(concurrentbackend-build) took 2.1891ms
[debug]             Load.loadTransitive: finalizeProject(Project(id concurrentbackend-build, base: C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, plugins: List(<none>))) took 4.8703ms
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, returning: (concurrentbackend-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 116.5312ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.3213ms
[debug]         Load.loadUnit(file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/project/, ...) took 145.0479ms
[debug]       Load.apply: load took 146.4483ms
[debug]       Load.apply: resolveProjects took 0.082ms
[debug]       Load.apply: finalTransforms took 18.7576ms
[debug]       Load.apply: config.delegates took 0.3443ms
[debug]       Load.apply: Def.make(settings)... took 90.2351ms
[debug]       Load.apply: structureIndex took 41.8005ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 635.2642ms
[debug]     Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory C:\Users\mikko\Desktop\koodaus\ConcurrentBackend
[debug]       Load.loadUnit: mkEval took 0.6886ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5813 ms
[info] loading settings for project concurrentbackend from build.sbt ...
[debug]         Load.resolveProject(concurrentbackend) took 20.7273ms
[debug]       Load.loadTransitive: finalizeProject(Project(id concurrentbackend, base: C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, plugins: List(<none>))) took 24.0938ms
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, returning: (concurrentbackend)
[debug]     Load.loadUnit: loadedProjectsRaw took 94.3499ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.6653ms
[debug]   Load.loadUnit(file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/, ...) took 736.7692ms
[debug] Load.apply: load took 738.2207ms
[debug] Load.apply: resolveProjects took 0.0783ms
[debug] Load.apply: finalTransforms took 21.2631ms
[debug] Load.apply: config.delegates took 0.262ms
[debug] Load.apply: Def.make(settings)... took 67.1415ms
[debug] Load.apply: structureIndex took 18.9951ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to ConcurrentBackend (in build file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52684 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52684, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ConcurrentBackend (in build file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/)
[debug] > Exec(idea-shell, None, None)
