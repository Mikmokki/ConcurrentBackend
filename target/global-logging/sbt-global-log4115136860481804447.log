[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mikko\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mikko\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (IBM Corporation Java 1.8.0_352)
[debug]       Load.loadUnit: plugins took 62.3488ms
[debug]       Load.loadUnit: defsScala took 0.2044ms
[debug] [Loading] Scanning directory C:\Users\mikko\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.5278 ms
[debug]           Load.resolveProject(global-plugins) took 33.3454ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mikko\.sbt\1.0\plugins, plugins: List(<none>))) took 60.7032ms
[debug] [Loading] Done in C:\Users\mikko\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 77.187ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2117ms
[debug]     Load.loadUnit(file:/C:/Users/mikko/.sbt/1.0/plugins/, ...) took 144.9966ms
[debug]   Load.apply: load took 303.0647ms
[debug]   Load.apply: resolveProjects took 5.0147ms
[debug]   Load.apply: finalTransforms took 79.8539ms
[debug]   Load.apply: config.delegates took 11.8512ms
[debug]   Load.apply: Def.make(settings)... took 580.6586ms
[debug]   Load.apply: structureIndex took 143.1183ms
[debug]   Load.apply: mkStreams took 1.5153ms
[info] loading global plugins from C:\Users\mikko\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2701.4213ms
[debug]           Load.loadUnit: plugins took 26.3934ms
[debug]           Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project
[debug]             Load.loadUnit: mkEval took 4.9594ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8883 ms
[info] loading settings for project concurrentbackend-build from idea.sbt ...
[debug]               Load.resolveProject(concurrentbackend-build) took 2.2728ms
[debug]             Load.loadTransitive: finalizeProject(Project(id concurrentbackend-build, base: C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, plugins: List(<none>))) took 4.6561ms
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project, returning: (concurrentbackend-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2350.1821ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.4731ms
[debug]         Load.loadUnit(file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/project/, ...) took 2380.971ms
[debug]       Load.apply: load took 2382.3463ms
[debug]       Load.apply: resolveProjects took 0.0857ms
[debug]       Load.apply: finalTransforms took 15.2804ms
[debug]       Load.apply: config.delegates took 0.3457ms
[debug]       Load.apply: Def.make(settings)... took 79.4566ms
[debug]       Load.apply: structureIndex took 38.8356ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\mikko\Desktop\koodaus\ConcurrentBackend\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4164.7842ms
[debug]     Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory C:\Users\mikko\Desktop\koodaus\ConcurrentBackend
[debug]       Load.loadUnit: mkEval took 0.4853ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4332 ms
[info] loading settings for project concurrentbackend from build.sbt ...
[debug]         Load.resolveProject(concurrentbackend) took 50.1895ms
[debug]       Load.loadTransitive: finalizeProject(Project(id concurrentbackend, base: C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, plugins: List(<none>))) took 55.0784ms
[debug] [Loading] Done in C:\Users\mikko\Desktop\koodaus\ConcurrentBackend, returning: (concurrentbackend)
[debug]     Load.loadUnit: loadedProjectsRaw took 1694.8989ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.6274ms
[debug]   Load.loadUnit(file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/, ...) took 5875.0961ms
[debug] Load.apply: load took 5876.8837ms
[debug] Load.apply: resolveProjects took 0.0881ms
[debug] Load.apply: finalTransforms took 25.3237ms
[debug] Load.apply: config.delegates took 0.4722ms
[debug] Load.apply: Def.make(settings)... took 75.9567ms
[debug] Load.apply: structureIndex took 25.7295ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to ConcurrentBackend (in build file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51264 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51264, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ConcurrentBackend (in build file:/C:/Users/mikko/Desktop/koodaus/ConcurrentBackend/)
[debug] > Exec(idea-shell, None, None)
